package com.so.dal.core.model.game;
// Generated 27.2.2017 18:41:18 by Hibernate Tools 4.3.1


import com.so.dal.core.model.Resource;
import com.so.dal.core.model.Team;
import com.so.dal.core.model.season.SeasonTournamentGroup;
import com.so.dal.floorball.model.game.SportFlorbalGameActivity;
import com.so.dal.floorball.model.game.SportFlorbalGameShots;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * CompetitorTeam generated by hbm2java
 */
@Entity
@Table(name="competitorTeam"
    ,catalog="sport_app_dev"
)
public class CompetitorTeam  implements java.io.Serializable {


     private Integer id;
     private Resource resource;
     private SeasonTournamentGroup seasonTournamentGroup;
     private Team team;
     private Set<SportFlorbalGameActivity> sportFlorbalGameActivities = new HashSet<SportFlorbalGameActivity>(0);
     private Set<SportFlorbalGameShots> sportFlorbalGameShotses = new HashSet<SportFlorbalGameShots>(0);
     private Set<CompetitorTeamPlayer> competitorTeamPlayers = new HashSet<CompetitorTeamPlayer>(0);
     private Set<Game> gamesForIdAwayTeam = new HashSet<Game>(0);
     private Set<Game> gamesForIdHomeTeam = new HashSet<Game>(0);

    public CompetitorTeam() {
    }

	
    public CompetitorTeam(Resource resource, SeasonTournamentGroup seasonTournamentGroup, Team team) {
        this.resource = resource;
        this.seasonTournamentGroup = seasonTournamentGroup;
        this.team = team;
    }
    public CompetitorTeam(Resource resource, SeasonTournamentGroup seasonTournamentGroup, Team team, Set<SportFlorbalGameActivity> sportFlorbalGameActivities, Set<SportFlorbalGameShots> sportFlorbalGameShotses, Set<CompetitorTeamPlayer> competitorTeamPlayers, Set<Game> gamesForIdAwayTeam, Set<Game> gamesForIdHomeTeam) {
       this.resource = resource;
       this.seasonTournamentGroup = seasonTournamentGroup;
       this.team = team;
       this.sportFlorbalGameActivities = sportFlorbalGameActivities;
       this.sportFlorbalGameShotses = sportFlorbalGameShotses;
       this.competitorTeamPlayers = competitorTeamPlayers;
       this.gamesForIdAwayTeam = gamesForIdAwayTeam;
       this.gamesForIdHomeTeam = gamesForIdHomeTeam;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="id", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="idLogo", nullable=false)
    public Resource getResource() {
        return this.resource;
    }
    
    public void setResource(Resource resource) {
        this.resource = resource;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="idGroup")
    public SeasonTournamentGroup getSeasonTournamentGroup() {
        return this.seasonTournamentGroup;
    }
    
    public void setSeasonTournamentGroup(SeasonTournamentGroup seasonTournamentGroup) {
        this.seasonTournamentGroup = seasonTournamentGroup;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="idTeam", nullable=false)
    public Team getTeam() {
        return this.team;
    }
    
    public void setTeam(Team team) {
        this.team = team;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="competitorTeam")
    public Set<SportFlorbalGameActivity> getSportFlorbalGameActivities() {
        return this.sportFlorbalGameActivities;
    }
    
    public void setSportFlorbalGameActivities(Set<SportFlorbalGameActivity> sportFlorbalGameActivities) {
        this.sportFlorbalGameActivities = sportFlorbalGameActivities;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="competitorTeam")
    public Set<SportFlorbalGameShots> getSportFlorbalGameShotses() {
        return this.sportFlorbalGameShotses;
    }
    
    public void setSportFlorbalGameShotses(Set<SportFlorbalGameShots> sportFlorbalGameShotses) {
        this.sportFlorbalGameShotses = sportFlorbalGameShotses;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="competitorTeam")
    public Set<CompetitorTeamPlayer> getCompetitorTeamPlayers() {
        return this.competitorTeamPlayers;
    }
    
    public void setCompetitorTeamPlayers(Set<CompetitorTeamPlayer> competitorTeamPlayers) {
        this.competitorTeamPlayers = competitorTeamPlayers;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="competitorTeamByIdAwayTeam")
    public Set<Game> getGamesForIdAwayTeam() {
        return this.gamesForIdAwayTeam;
    }
    
    public void setGamesForIdAwayTeam(Set<Game> gamesForIdAwayTeam) {
        this.gamesForIdAwayTeam = gamesForIdAwayTeam;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="competitorTeamByIdHomeTeam")
    public Set<Game> getGamesForIdHomeTeam() {
        return this.gamesForIdHomeTeam;
    }
    
    public void setGamesForIdHomeTeam(Set<Game> gamesForIdHomeTeam) {
        this.gamesForIdHomeTeam = gamesForIdHomeTeam;
    }




}


